import pytest

from src.masks import get_mask_account, get_mask_number_card


@pytest.mark.parametrize(
    "card, card_under_mask",
    [
        ("1234567812345678", "1234 56** **** 5678"),
        ("1234", "Ошибка: Номер карты должен содержать только цифры и быть длиной 16 символов"),
        ("12345678901234567", "Ошибка: Номер карты должен содержать только цифры и быть длиной 16 символов"),
        ("1234abcd5678efgh", "Ошибка: Номер карты должен содержать только цифры и быть длиной 16 символов"),
        ("1234 5678 9012 3456", "Ошибка: Номер карты должен содержать только цифры и быть длиной 16 символов"),
        ("", "Ошибка: Номер карты должен содержать только цифры и быть длиной 16 символов"),
    ],
)
def test_get_mask_number_card(card: str, card_under_mask: str) -> None:
    assert get_mask_number_card(card) == card_under_mask


@pytest.mark.parametrize(
    "card, card_with_stars",
    [
        ("73654108430135874305", "**4305"),
        ("1234567890123456789", "Ошибка: Номер счёта должен содержать только цифры и быть длиной 20 символов"),
        ("abcd123456789012345678", "Ошибка: Номер счёта должен содержать только цифры и быть длиной 20 символов"),
        ("1234 5678 9012 3456 7890", "Ошибка: Номер счёта должен содержать только цифры и быть длиной 20 символов"),
        (
            "123456789012345678901234085642342",
            "Ошибка: Номер счёта должен содержать только цифры и быть длиной 20 символов",
        ),
        ("1234567890123456789!", "Ошибка: Номер счёта должен содержать только цифры и быть длиной 20 символов"),
        ("!", "Ошибка: Номер счёта должен содержать только цифры и быть длиной 20 символов"),
    ],
)
def test_get_mask_account(card: str, card_with_stars: str) -> None:
    assert get_mask_account(card) == card_with_stars
